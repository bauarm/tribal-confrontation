(()=>{"use strict";function t(t){return document.getElementById(t)}function n(t,n){return Math.floor(Math.random()*(n-t+1))+t}let e=!1;const o=requestAnimationFrame,r={tick:0,curTick:0,day:1,mount:3,year:1040,mountName:["","зима","позд. зима","ран. весна","весна","позд. весна","ран. лето","лето","позд. лето","ран. осень","осень","позд. осень","ран. зима"]};function l(t,n,e,o){const r=[];let l=0;for(let c=n;c<n+o-1;c+=1){r.push([]);for(let n=e;n<e+o;n+=1)r[l].push(t[c][n]);l+=1}return r}function c(t,e,o){let r=!0;for(;r;)for(let l=e[0][0];l<e[0][1];l+=1)for(let c=e[1][0];c<e[1][1];c+=1){const e=n(0,7);t[l][c][0]>=0&&3===e&&r&&(t[l][c][0]=o,r=!1)}}function f(t,n){const e=t;return c(e,[[0,4],[0,2]],n),c(e,[[0,4],[3,5]],n),e}function u(t,n,e,o,r){let l,c=0;for(let f=e;f<e+r-1;f+=1){l=0;for(let e=o;e<o+r;e+=1)t[f][e][0]=n[c][l][0],l+=1;c+=1}}const i=t("canvas"),s=32;i.width=544,i.height=544;const a=i.getContext("2d");a.fillStyle="rgb(128, 128, 0)",a.fillRect(0,0,544,544);const h=(t,n,e,o,r)=>{a.fillStyle=r,a.fillRect(t,n,e,o)};function d(t,n){let e=0;for(let o=0;o<t.length;o+=1)for(let r=0;r<t.length;r+=1)t[o][r][0]===n&&(e+=1);return e}function g(t){return function(t){const n=[998];for(let e=1;e<11;e+=1){const o=d(t,e);n.push(o)}return n}(t)}const y=[[255,0,0],[139,0,0],[199,21,133],[255,69,0],[139,69,19],[102,51,153],[255,0,255],[25,25,112],[47,79,79],[0,100,0]],m=["bears","beavers","boars","deers","fishes","foxes","horses","hares","ravens","swifts","wolfes"];function S(t,e){const o=[];for(;o.length<e;){const e=t[n(0,t.length-1)];-1===o.indexOf(e)&&o.push(e)}return o}function b(t,n,e,o){const r=[];let l=0;for(let c=n;c<n+o;c+=1){r.push([]);for(let n=e;n<e+o;n+=1)r[l].push(t[c][n]);l+=1}return r}function v(t,n){const e=t;let o=n.length,r=0;for(let t=0;t<e.length;t+=1)for(let l=0;l<e.length;l+=1)0!==o&&10===e[t][l][0]&&(e[t][l][1]=n[r][0],o-=1,r+=1);return e}function w(t,n,e,o,r){let l,c=0;for(let f=e;f<e+r;f+=1){l=0;for(let e=o;e<o+r;e+=1)t[f][e][1]=n[c][l][1],l+=1;c+=1}}const p=t("canvas").getContext("2d"),M=32;var x=function(t,n,e,o){return new(e||(e=Promise))((function(r,l){function c(t){try{u(o.next(t))}catch(t){l(t)}}function f(t){try{u(o.throw(t))}catch(t){l(t)}}function u(t){var n;t.done?r(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(c,f)}u((o=o.apply(t,n||[])).next())}))};function T(t,n,e){p.font="9px Ubuntu",p.fillStyle="white",p.fillText(e,t*M+2,n*M+28)}function k(t,n){for(let e=0;e<n.length;e+=1)if(n[e][0]===t)return n[e][1];return"red"}function L(t,n,e,o,r){return x(this,void 0,void 0,(function*(){const l=yield function(t){return new Promise((n=>{const e=`accets/${t}.svg`,o=new Image;o.src=e,o.onload=()=>n(o)}))}(t);return p.drawImage(l,n,e,o,r)}))}var A;!function t(){o(t),e&&function(){const t=document.querySelector("#tday"),n=document.querySelector("#tmount"),e=document.querySelector("#tyear");t.innerHTML=r.day.toString(),n.innerHTML=r.mountName[r.mount],e.innerHTML=r.year.toString(),r.tick+=1,r.tick>10&&(r.day+=1,r.tick=0,t.innerHTML=r.day.toString()),r.day>30&&(r.mount+=1,r.day=1,n.innerHTML=r.mountName[r.mount]),r.mount>12&&(r.year+=1,r.mount=1,e.innerHTML=r.year.toString())}()}(),null===(A=document.querySelector("#pauseBtn"))||void 0===A||A.addEventListener("click",(()=>{e=!e}));const H=t("canvas");H.width=512,H.height=512;const $=H.getContext("2d");$.fillStyle="rgb(128, 128, 0)",$.fillRect(0,0,512,512);const q=function(t=17){const e=function(t=16){const e=function(t=16){const n=[];for(let e=0;e<t;e+=1){n[e]=new Array(t).fill(0);for(let o=0;o<t;o+=1)n[e][o]=[-1,0,0]}return n}(t);for(let o=1;o<t-1;o+=1){const r=Math.floor(n(1,3)),l=Math.floor(n(t-3,t-1));for(let t=r;t<l;t+=1)e[t][o][0]=0}for(let o=1;o<t-1;o+=1){const r=n(0,3);0===r&&(e[o][1][0]=-1),1===r&&(e[o][t-2][0]=-1)}return function(t){const e=t,o=e.length;for(let r=0;r<o;r+=1)for(let l=0;l<o;l+=1)0===t[r][l][0]&&(e[r][l][0]=n(1,9));return e}(e)}(t),o=Math.floor(t/2),r=[[3,2],[o+1,2],[3,o+1],[o+1,o+1]];for(let t=0;t<4;t+=1)u(e,f(l(e,r[t][0],r[t][1],5),10),r[t][0],r[t][1],5);return e}(16);(function(t){for(let n=0;n<t.length;n+=1)for(let e=0;e<t.length;e+=1)a.strokeStyle="white",a.strokeRect(n*s,e*s,s,s),a.font="12px Ubuntu",10===t[n][e][0]?a.fillStyle="blue":a.fillStyle="red",10===t[n][e][0]?(h(n*s,e*s,s,s,"rgb(0, 153, 0)"),a.fillStyle="blue"):-1===t[n][e][0]?(h(n*s,e*s,s,s,"rgb(0, 128, 255)"),a.fillStyle="blue"):t[n][e][0]<3&&0!==t[n][e][0]?(h(n*s,e*s,s,s,"rgb(204, 204, 0)"),a.fillStyle="white"):t[n][e][0]>2&&t[n][e][0]<10&&(h(n*s,e*s,s,s,"rgb(102, 153, 0)"),a.fillStyle="white"),a.fillText(t[n][e][0],n*s+10,e*s+18)})(q),console.log(`Num of best fields ${g(q)[10]}`),console.log(`Num of worse fields ${g(q)[1]}`);const N=function(t,n){const e=[],o=S(y,8),r=S(m,8);for(let t=0;t<8;t+=1)e.push([]),e[t].push(r[t]),e[t].push(`rgba(${(l=o[t])[0]}, ${l[1]} ,${l[2]}, 255)`),e[t].push([0,0]);var l;return e}();!function(t,n){for(let f=0;f<t.length;f+=1)for(let u=0;u<t.length;u+=1)if(0!==t[f][u][1]){const i=k(t[f][u][1],n);e=f*M,o=u*M,r=M-1,l=M-1,c=i,p.fillStyle=c,p.fillRect(e,o,r,l),T(f,u,t[f][u][1]),L(t[f][u][1],f*M+5,u*M,M-10,M-10)}var e,o,r,l,c}(function(t){const n=t.islandArr,e=Math.floor(t.scale/2),o=[[0,0],[e,0],[0,e],[e,e]],r=t.tribesArr;let l=0;for(let t=0;t<4;t+=1){const c=r.slice(l,l+2);w(n,v(b(n,o[t][0],o[t][1],e),c),o[t][0],o[t][1],e),l+=2}return n}({islandArr:q,tribesArr:N,scale:16}),N)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,